AWSTemplateFormatVersion: '2010-09-09'
Metadata: {}
Parameters: {}
Mappings: {}
Conditions: {}
Resources:
  GatewayWww:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: '@ennube/starter-www'
  GatewayWwwURLGET:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: GatewayWww
      ResourceId:
        'Fn::GetAtt':
          - GatewayWww
          - RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters: {}
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: !<tag:yaml.org,2002:js/undefined> ''
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($inputRoot = $input.path('$'))
                $inputRoot.content
              application/json: |-
                #set($inputRoot = $input.path('$'))
                $inputRoot.content
          - StatusCode: 301
            SelectionPattern: http.*
            ResponseParameters:
              method.response.header.location: integration.response.body.errorMessage
            ResponseTemplates:
              text/html: ''
              application/json: ''
          - StatusCode: 400
            SelectionPattern: '\[400.*'
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
              application/json: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
          - StatusCode: 401
            SelectionPattern: '\[401.*'
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
              application/json: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
          - StatusCode: 403
            SelectionPattern: '\[403.*'
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
              application/json: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
          - StatusCode: 404
            SelectionPattern: '\[404.*'
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
              application/json: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
          - StatusCode: 500
            SelectionPattern: '\[500.*'
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
              application/json: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
        Uri:
          'Fn::Join':
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - 'Fn::GetAtt':
                  - IndexHTTPServiceDevelopmentLambda
                  - Arn
              - /invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
        - StatusCode: 301
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: true
        - StatusCode: 400
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
        - StatusCode: 401
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
        - StatusCode: 403
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
        - StatusCode: 404
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
        - StatusCode: 500
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
  GatewayWwwURLRobotsTxt:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: GatewayWww
      ParentId:
        'Fn::GetAtt':
          - GatewayWww
          - RootResourceId
      PathPart: robots.txt
  GatewayWwwURLRobotsTxtGET:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: GatewayWww
      ResourceId:
        Ref: GatewayWwwURLRobotsTxt
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters: {}
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: !<tag:yaml.org,2002:js/undefined> ''
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($inputRoot = $input.path('$'))
                $inputRoot.content
              application/json: |-
                #set($inputRoot = $input.path('$'))
                $inputRoot.content
          - StatusCode: 301
            SelectionPattern: http.*
            ResponseParameters:
              method.response.header.location: integration.response.body.errorMessage
            ResponseTemplates:
              text/html: ''
              application/json: ''
          - StatusCode: 400
            SelectionPattern: '\[400.*'
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
              application/json: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
          - StatusCode: 401
            SelectionPattern: '\[401.*'
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
              application/json: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
          - StatusCode: 403
            SelectionPattern: '\[403.*'
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
              application/json: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
          - StatusCode: 404
            SelectionPattern: '\[404.*'
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
              application/json: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
          - StatusCode: 500
            SelectionPattern: '\[500.*'
            ResponseParameters: {}
            ResponseTemplates:
              text/http: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
              application/json: |-
                #set($_body = $util.parseJson($input.path('$.errorMessage'))[1])
                $_body.content
        Uri:
          'Fn::Join':
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - 'Fn::GetAtt':
                  - IndexHTTPServiceDevelopmentLambda
                  - Arn
              - /invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
        - StatusCode: 301
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: true
        - StatusCode: 400
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
        - StatusCode: 401
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
        - StatusCode: 403
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
        - StatusCode: 404
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
        - StatusCode: 500
          ResponseModels:
            text/html: Empty
            application/json: Empty
          ResponseParameters:
            method.response.header.location: false
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  ServicePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: EnnubeStarter-DevelopmentServicePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:eu-west-1:*:*'
      Roles:
        - Ref: ServiceRole
  IndexHTTPServiceDevelopmentLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: IndexHTTPServiceDevelopmentLambda
      Runtime: nodejs4.3
      MemorySize: 256
      Timeout: 6
      Handler: IndexHTTPService.handler
      Role:
        'Fn::GetAtt':
          - ServiceRole
          - Arn
      Code:
        S3Bucket: ennube-starter-deployment
        S3Key: '2016-09-21T08:02:51.070Z/IndexHTTPService.zip'
  IndexHTTPServiceDevelopmentLambdaGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        'Fn::GetAtt':
          - IndexHTTPServiceDevelopmentLambda
          - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
  GatewayWwwDevelopmentDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - GatewayWwwURLGET
      - GatewayWwwURLRobotsTxtGET
    Properties:
      RestApiId:
        Ref: GatewayWww
      StageName: Development
Outputs: {}
